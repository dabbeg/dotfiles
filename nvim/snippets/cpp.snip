include c.snip

snippet inc
alias   #inc, #include
    #include <${1}>

snippet     template
abbr        template <T>
    template<typename ${1:T}> ${0}

snippet     class
abbr        class {}
    class ${1:#:name} {
        ${2}
    public:
        $1(${3});
    };
    $1::$1($3) {
        ${0:TARGET}
    }

snippet     class-without-constructor
abbr        class {}
    class ${1:#:name} {
        ${2}
    };

snippet     try
abbr        try catch
    try {
        ${1:#:TARGET}
    } catch (${2:...}) {
        ${3}
    }

snippet     for
abbr        for (:) {}
    for (int i = 0; i < ${1}; i++) {
        ${0:TARGET}
    }

# lambda expression ( C++11 feature )
snippet     lambda
abbr        [](){}
    [${1}](${2})${3}{ ${4:TARGET} }${0:;}

# scoped enumeration ( C++11 feature )
snippet     enum_scoped
abbr        enum struct {};
    enum struct ${1:#:name} { ${2:#:TARGET} };

snippet     start
abbr        #include<iostream> int main...
    #include <iostream>
    #include <stdio.h> // printf, scanf
    #include <stdlib.h> // atof
    #include <vector> // push_back
    using namespace std;

    int main() {
        ${0:TARGET}
    }

snippet     p
options     head
  std::cout << ${0:TARGET} << std::endl;

snippet     scanf
    scanf("${1}", ${2});${0}
